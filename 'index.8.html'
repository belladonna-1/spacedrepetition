<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spaced Repetition Widget</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: url('light-landscape.jpg') no-repeat center center fixed;
            background-size: cover;
            color: #333;
            transition: background 0.3s, color 0.3s;
        }
        .dark-mode {
            background: url('dark-landscape.jpg') no-repeat center center fixed;
            background-size: cover;
            color: #cfcfcf;
        }
        .container {
            width: 80%;
            margin: auto;
            padding: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s, color 0.3s;
        }
        .dark-mode .container {
            background-color: rgba(46, 46, 46, 0.8);
        }
        h1 {
            text-align: center;
            color: #007acc;
        }
        .dark-mode h1 {
            color: #66aaff;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #555;
        }
        .dark-mode label {
            color: #ccc;
        }
        input, select {
            width: 100%;
            padding: 8px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 5px;
            transition: background-color 0.3s, color 0.3s;
        }
        .dark-mode input, .dark-mode select {
            background-color: #444;
            color: #cfcfcf;
            border: 1px solid #555;
        }
        button {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #007acc;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .dark-mode button {
            background-color: #005f99;
        }
        .result {
            margin-top: 20px;
        }
        .result-item {
            margin-bottom: 10px;
            padding: 10px;
            background-color: #e7f3ff;
            border-left: 5px solid #007acc;
            border-radius: 5px;
            transition: background-color 0.3s, border-color 0.3s;
        }
        .dark-mode .result-item {
            background-color: #3e3e3e;
            border-color: #66aaff;
        }
        .result-header {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .switch-container {
            text-align: center;
            margin-bottom: 20px;
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #007acc;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        .chapter-list {
            margin-top: 20px;
        }
        .chapter-list-item {
            padding: 10px;
            background-color: #e7f3ff;
            border-left: 5px solid #007acc;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: background-color 0.3s, border-color 0.3s;
        }
        .dark-mode .chapter-list-item {
            background-color: #3e3e3e;
            border-color: #66aaff;
        }
        .chapter-list-item:hover {
            background-color: #d0e9ff;
        }
        .dark-mode .chapter-list-item:hover {
            background-color: #4e4e4e;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Spaced Repetition Widget</h1>
        <div class="switch-container">
            <label class="switch">
                <input type="checkbox" id="themeSwitch">
                <span class="slider"></span>
            </label>
        </div>
        <div class="form-group">
            <label for="characterName">Character Name</label>
            <input type="text" id="characterName" required>
        </div>
        <div class="form-group">
            <label for="dateAdded">Date Added</label>
            <input type="date" id="dateAdded" required>
        </div>
        <div class="form-group">
            <label for="difficulty">Difficulty Level</label>
            <select id="difficulty" required>
                <option value="easy">Easy</option>
                <option value="mid">Medium</option>
                <option value="hard">Hard</option>
            </select>
        </div>
        <button onclick="saveChapter()">Save Chapter</button>
        <div class="chapter-list" id="chapterList"></div>
        <div class="result" id="result"></div>
    </div>

    <script>
        // Theme toggle
        const themeSwitch = document.getElementById('themeSwitch');
        themeSwitch.addEventListener('change', () => {
            document.body.classList.toggle('dark-mode');
            localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
        });

        // Load dark mode preference
        if (localStorage.getItem('darkMode') === 'true') {
            document.body.classList.add('dark-mode');
            themeSwitch.checked = true;
        }

        // Function to save chapter information
        function saveChapter() {
            const name = document.getElementById('characterName').value;
            const dateAdded = document.getElementById('dateAdded').value;
            const difficulty = document.getElementById('difficulty').value;

            if (!name || !dateAdded || !difficulty) {
                alert("Please fill in all fields");
                return;
            }

            const chapter = {
                name,
                dateAdded,
                difficulty
            };

            localStorage.setItem(`chapter_${name}`, JSON.stringify(chapter));
            alert("Chapter saved!");
            loadChapterList();
        }

        // Function to load the list of chapters
        function loadChapterList() {
            const chapterListDiv = document.getElementById('chapterList');
            chapterListDiv.innerHTML = '';

            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key.startsWith('chapter_')) {
                    const chapter = JSON.parse(localStorage.getItem(key));
                    const chapterItem = document.createElement('div');
                    chapterItem.className = 'chapter-list-item';
                    chapterItem.innerHTML = `${chapter.name} (Added on: ${chapter.dateAdded})`;
                    chapterItem.onclick = () => generateSchedule(chapter.name);
                    chapterListDiv.appendChild(chapterItem);
                }
            }
        }

        // Function to generate repetition schedule
        function generateSchedule(name) {
            const chapter = JSON.parse(localStorage.getItem(`chapter_${name}`));
            if (!chapter) {
                alert("Chapter not found. Please save the chapter first.");
                return;
            }

            const dateAdded = new Date(chapter.dateAdded);
            const difficulty = chapter.difficulty;

            let intervals;
            if (difficulty === 'easy') {
                intervals = [1, 2, 4, 8, 15, 29, 56, 108, 208, 401];
            } else if (difficulty === 'mid') {
                intervals = [1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504];
            } else if (difficulty === 'hard') {
                intervals = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377];
            }

            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '';

            intervals.forEach((interval, index) => {
                const repDate = new Date(dateAdded);
                repDate.setDate(dateAdded.getDate() + interval);

                const resultItem = document.createElement('div');
                resultItem.className = 'result-item';
                resultItem.innerHTML = `<div class="result-header">Repetition ${index + 1}:</div> ${repDate.toDateString()}`;
                resultDiv.appendChild(resultItem);
            });
        }

        // Function to check for chapters due for study
        function checkStudySchedule() {
            const currentDate = new Date();
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key.startsWith('chapter_')) {
                    const chapter = JSON.parse(localStorage.getItem(key));
                    const dateAdded = new Date(chapter.dateAdded);
                    const difficulty = chapter.difficulty;

                    let intervals;
                    if (difficulty === 'easy') {
                        intervals = [1, 2, 4, 8, 15, 29, 56, 108, 208, 401];
                    } else if (difficulty === 'mid') {
                        intervals = [1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504];
                    } else if (difficulty === 'hard') {
                        intervals = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377];
                    }

                    let nextRepDate = new Date(dateAdded);
                    for (const interval of intervals) {
                        nextRepDate.setDate(nextRepDate.getDate() + interval);
                        if (nextRepDate.toDateString() === currentDate.toDateString()) {
                            alert(`Today, you should study "${chapter.name}"`);
                            break;
                        }
                    }
                }
            }
        }

        // Load the list of chapters and check study schedule on page load
        window.onload = () => {
            loadChapterList();
            checkStudySchedule();
        };
    </script>
</body>
</html>

